from _typeshed import Incomplete
from numpy import absolute

class BadCoefficients(UserWarning): ...
abs = absolute

def findfreqs(num, den, N, kind: str = ...): ...
def freqs(b, a, worN: int = ..., plot: Incomplete | None = ...): ...
def freqs_zpk(z, p, k, worN: int = ...): ...
def freqz(b, a: int = ..., worN: int = ..., whole: bool = ..., plot: Incomplete | None = ..., fs=..., include_nyquist: bool = ...): ...
def freqz_zpk(z, p, k, worN: int = ..., whole: bool = ..., fs=...): ...
def group_delay(system, w: int = ..., whole: bool = ..., fs=...): ...
def sosfreqz(sos, worN: int = ..., whole: bool = ..., fs=...): ...
def tf2zpk(b, a): ...
def zpk2tf(z, p, k): ...
def tf2sos(b, a, pairing: Incomplete | None = ..., *, analog: bool = ...): ...
def sos2tf(sos): ...
def sos2zpk(sos): ...
def zpk2sos(z, p, k, pairing: Incomplete | None = ..., *, analog: bool = ...): ...
def normalize(b, a): ...
def lp2lp(b, a, wo: float = ...): ...
def lp2hp(b, a, wo: float = ...): ...
def lp2bp(b, a, wo: float = ..., bw: float = ...): ...
def lp2bs(b, a, wo: float = ..., bw: float = ...): ...
def bilinear(b, a, fs: float = ...): ...
def iirdesign(wp, ws, gpass, gstop, analog: bool = ..., ftype: str = ..., output: str = ..., fs: Incomplete | None = ...): ...
def iirfilter(N, Wn, rp: Incomplete | None = ..., rs: Incomplete | None = ..., btype: str = ..., analog: bool = ..., ftype: str = ..., output: str = ..., fs: Incomplete | None = ...): ...
def bilinear_zpk(z, p, k, fs): ...
def lp2lp_zpk(z, p, k, wo: float = ...): ...
def lp2hp_zpk(z, p, k, wo: float = ...): ...
def lp2bp_zpk(z, p, k, wo: float = ..., bw: float = ...): ...
def lp2bs_zpk(z, p, k, wo: float = ..., bw: float = ...): ...
def butter(N, Wn, btype: str = ..., analog: bool = ..., output: str = ..., fs: Incomplete | None = ...): ...
def cheby1(N, rp, Wn, btype: str = ..., analog: bool = ..., output: str = ..., fs: Incomplete | None = ...): ...
def cheby2(N, rs, Wn, btype: str = ..., analog: bool = ..., output: str = ..., fs: Incomplete | None = ...): ...
def ellip(N, rp, rs, Wn, btype: str = ..., analog: bool = ..., output: str = ..., fs: Incomplete | None = ...): ...
def bessel(N, Wn, btype: str = ..., analog: bool = ..., output: str = ..., norm: str = ..., fs: Incomplete | None = ...): ...
def band_stop_obj(wp, ind, passb, stopb, gpass, gstop, type): ...
def buttord(wp, ws, gpass, gstop, analog: bool = ..., fs: Incomplete | None = ...): ...
def cheb1ord(wp, ws, gpass, gstop, analog: bool = ..., fs: Incomplete | None = ...): ...
def cheb2ord(wp, ws, gpass, gstop, analog: bool = ..., fs: Incomplete | None = ...): ...
def ellipord(wp, ws, gpass, gstop, analog: bool = ..., fs: Incomplete | None = ...): ...
def buttap(N): ...
def cheb1ap(N, rp): ...
def cheb2ap(N, rs): ...
def ellipap(N, rp, rs): ...
def besselap(N, norm: str = ...): ...
def iirnotch(w0, Q, fs: float = ...): ...
def iirpeak(w0, Q, fs: float = ...): ...
def iircomb(w0, Q, ftype: str = ..., fs: float = ..., *, pass_zero: bool = ...): ...
def gammatone(freq, ftype, order: Incomplete | None = ..., numtaps: Incomplete | None = ..., fs: Incomplete | None = ...): ...
