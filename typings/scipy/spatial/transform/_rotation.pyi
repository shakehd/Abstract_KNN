from _typeshed import Incomplete
from scipy._lib._util import check_random_state as check_random_state
from scipy.spatial.transform._rotation_groups import create_group as create_group
from typing import Any, overload

__test__: dict

class Rotation:
    single: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def align_vectors(cls, typecls, a, b, weights=..., return_sensitivity=...) -> Any: ...
    @overload
    def apply(self, vectors, inverse=...) -> Any: ...
    @overload
    def apply(self, vector) -> Any: ...
    @overload
    def apply(self, vector) -> Any: ...
    @overload
    def apply(self, vectors) -> Any: ...
    @overload
    def apply(self, vectors) -> Any: ...
    @overload
    def apply(self, vector) -> Any: ...
    @overload
    def apply(self, vector) -> Any: ...
    @overload
    def apply(self, vectors) -> Any: ...
    @overload
    def apply(self, vectors) -> Any: ...
    @overload
    def apply(self, vectors, inverse=...) -> Any: ...
    def as_euler(self, seq, degrees=...) -> Any: ...
    @overload
    def as_matrix(self) -> Any: ...
    @overload
    def as_matrix(self) -> Any: ...
    @overload
    def as_matrix(self) -> Any: ...
    @overload
    def as_matrix(self) -> Any: ...
    @overload
    def as_matrix(self) -> Any: ...
    @overload
    def as_matrix(self) -> Any: ...
    @overload
    def as_matrix(self) -> Any: ...
    @overload
    def as_mrp(self) -> Any: ...
    @overload
    def as_mrp(self) -> Any: ...
    @overload
    def as_mrp(self) -> Any: ...
    @overload
    def as_mrp(self) -> Any: ...
    @overload
    def as_mrp(self) -> Any: ...
    @overload
    def as_mrp(self) -> Any: ...
    @overload
    def as_mrp(self) -> Any: ...
    @overload
    def as_quat(self, canonical=...) -> Any: ...
    @overload
    def as_quat(self) -> Any: ...
    @overload
    def as_quat(self) -> Any: ...
    @overload
    def as_quat(self) -> Any: ...
    @overload
    def as_quat(self) -> Any: ...
    @overload
    def as_quat(self) -> Any: ...
    @overload
    def as_quat(self, canonical=...) -> Any: ...
    @overload
    def as_rotvec(self, degrees=...) -> Any: ...
    @overload
    def as_rotvec(self) -> Any: ...
    @overload
    def as_rotvec(self) -> Any: ...
    @overload
    def as_rotvec(self, degrees=...) -> Any: ...
    @overload
    def as_rotvec(self) -> Any: ...
    @overload
    def as_rotvec(self) -> Any: ...
    @overload
    def as_rotvec(self) -> Any: ...
    @overload
    def as_rotvec(self) -> Any: ...
    @classmethod
    def concatenate(cls, typecls, rotations) -> Any: ...
    @classmethod
    def create_group(cls, typecls, group, axis=...) -> Any: ...
    @classmethod
    def from_euler(cls, typecls, seq, angles, degrees=...) -> Any: ...
    @overload
    @classmethod
    def from_matrix(cls, typecls, matrix) -> Any: ...
    @overload
    @classmethod
    def from_matrix(cls, a) -> Any: ...
    @classmethod
    def from_mrp(cls, typecls, mrp) -> Any: ...
    @classmethod
    def from_quat(cls, typecls, quat) -> Any: ...
    @classmethod
    def from_rotvec(cls, typecls, rotvec, degrees=...) -> Any: ...
    @classmethod
    def identity(cls, typecls, num=...) -> Any: ...
    @overload
    def inv(self) -> Any: ...
    @overload
    def inv(self) -> Any: ...
    @overload
    def inv(self) -> Any: ...
    @overload
    def magnitude(self) -> Any: ...
    @overload
    def magnitude(self, s) -> Any: ...
    @overload
    def magnitude(self) -> Any: ...
    @overload
    def magnitude(self) -> Any: ...
    @overload
    def mean(self, weights=...) -> Any: ...
    @overload
    def mean(self) -> Any: ...
    @overload
    @classmethod
    def random(cls, typecls, num=..., random_state=...) -> Any: ...
    @overload
    @classmethod
    def random(cls) -> Any: ...
    def reduce(self, left=..., right=..., return_indices=...) -> Any: ...
    def __bool__(self) -> bool: ...
    def __delitem__(self, other) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __mul__(self, other): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __rmul__(self, other): ...
    def __setitem__(self, index, object) -> None: ...
    def __setstate_cython__(self, *args, **kwargs): ...

class Slerp:
    def __init__(self, key_times, key_rots) -> Any: ...
    def __call__(self, *args, **kwargs): ...
