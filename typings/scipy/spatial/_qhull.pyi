from _typeshed import Incomplete
from typing import Any, ClassVar, overload

__pyx_capi__: dict
__test__: dict

class ConvexHull(_QhullUser):
    @overload
    def __init__(self, points, incremental=..., qhull_options=...) -> Any: ...
    @overload
    def __init__(self, points) -> Any: ...
    @overload
    def __init__(self, points=..., qhull_options=...) -> Any: ...
    def add_points(self, points, restart=...) -> Any: ...
    @property
    def points(self): ...
    @property
    def vertices(self): ...

class Delaunay(_QhullUser):
    @overload
    def __init__(self, points, furthest_site=..., incremental=..., qhull_options=...) -> Any: ...
    @overload
    def __init__(self, points) -> Any: ...
    def add_points(self, points, restart=...) -> Any: ...
    def find_simplex(self, xi, bruteforce=..., tol=...) -> Any: ...
    def lift_points(self, x) -> Any: ...
    def plane_distance(self, xi) -> Any: ...
    @property
    def convex_hull(self): ...
    @property
    def points(self): ...
    @property
    def transform(self): ...
    @property
    def vertex_neighbor_vertices(self): ...
    @property
    def vertex_to_simplex(self): ...

class HalfspaceIntersection(_QhullUser):
    @overload
    def __init__(self, halfspaces, interior_point, incremental=..., qhull_options=...) -> Any: ...
    @overload
    def __init__(self, halfspaces, feasible_point) -> Any: ...
    def add_halfspaces(self, halfspaces, restart=...) -> Any: ...
    @property
    def dual_vertices(self): ...
    @property
    def halfspaces(self): ...

class QhullError(RuntimeError): ...

class Voronoi(_QhullUser):
    @overload
    def __init__(self, points, furthest_site=..., incremental=..., qhull_options=...) -> Any: ...
    @overload
    def __init__(self, points) -> Any: ...
    def add_points(self, points, restart=...) -> Any: ...
    @property
    def points(self): ...
    @property
    def ridge_dict(self): ...

class _Qhull:
    furthest_site: Incomplete
    mode_option: Incomplete
    ndim: Incomplete
    options: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def add_points(self, *args, **kwargs): ...
    def check_active(self, *args, **kwargs): ...
    def close(self, *args, **kwargs): ...
    def get_extremes_2d(self, *args, **kwargs): ...
    def get_hull_facets(self, *args, **kwargs): ...
    def get_hull_points(self, *args, **kwargs): ...
    def get_paraboloid_shift_scale(self, *args, **kwargs): ...
    def get_points(self, *args, **kwargs): ...
    def get_simplex_facet_array(self, *args, **kwargs): ...
    def get_voronoi_diagram(self, *args, **kwargs): ...
    def triangulate(self, *args, **kwargs): ...
    def volume_area(self, *args, **kwargs): ...
    def __reduce__(self): ...

class _QhullUser:
    _qhull: ClassVar[None] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self) -> Any: ...
    def __del__(self, *args, **kwargs) -> None: ...

@overload
def tsearch(tri, xi) -> Any: ...
@overload
def tsearch(tri, loc) -> Any: ...
