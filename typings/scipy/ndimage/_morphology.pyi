from _typeshed import Incomplete

def iterate_structure(structure, iterations, origin: Incomplete | None = ...): ...
def generate_binary_structure(rank, connectivity): ...
def binary_erosion(input, structure: Incomplete | None = ..., iterations: int = ..., mask: Incomplete | None = ..., output: Incomplete | None = ..., border_value: int = ..., origin: int = ..., brute_force: bool = ...): ...
def binary_dilation(input, structure: Incomplete | None = ..., iterations: int = ..., mask: Incomplete | None = ..., output: Incomplete | None = ..., border_value: int = ..., origin: int = ..., brute_force: bool = ...): ...
def binary_opening(input, structure: Incomplete | None = ..., iterations: int = ..., output: Incomplete | None = ..., origin: int = ..., mask: Incomplete | None = ..., border_value: int = ..., brute_force: bool = ...): ...
def binary_closing(input, structure: Incomplete | None = ..., iterations: int = ..., output: Incomplete | None = ..., origin: int = ..., mask: Incomplete | None = ..., border_value: int = ..., brute_force: bool = ...): ...
def binary_hit_or_miss(input, structure1: Incomplete | None = ..., structure2: Incomplete | None = ..., output: Incomplete | None = ..., origin1: int = ..., origin2: Incomplete | None = ...): ...
def binary_propagation(input, structure: Incomplete | None = ..., mask: Incomplete | None = ..., output: Incomplete | None = ..., border_value: int = ..., origin: int = ...): ...
def binary_fill_holes(input, structure: Incomplete | None = ..., output: Incomplete | None = ..., origin: int = ...): ...
def grey_erosion(input, size: Incomplete | None = ..., footprint: Incomplete | None = ..., structure: Incomplete | None = ..., output: Incomplete | None = ..., mode: str = ..., cval: float = ..., origin: int = ...): ...
def grey_dilation(input, size: Incomplete | None = ..., footprint: Incomplete | None = ..., structure: Incomplete | None = ..., output: Incomplete | None = ..., mode: str = ..., cval: float = ..., origin: int = ...): ...
def grey_opening(input, size: Incomplete | None = ..., footprint: Incomplete | None = ..., structure: Incomplete | None = ..., output: Incomplete | None = ..., mode: str = ..., cval: float = ..., origin: int = ...): ...
def grey_closing(input, size: Incomplete | None = ..., footprint: Incomplete | None = ..., structure: Incomplete | None = ..., output: Incomplete | None = ..., mode: str = ..., cval: float = ..., origin: int = ...): ...
def morphological_gradient(input, size: Incomplete | None = ..., footprint: Incomplete | None = ..., structure: Incomplete | None = ..., output: Incomplete | None = ..., mode: str = ..., cval: float = ..., origin: int = ...): ...
def morphological_laplace(input, size: Incomplete | None = ..., footprint: Incomplete | None = ..., structure: Incomplete | None = ..., output: Incomplete | None = ..., mode: str = ..., cval: float = ..., origin: int = ...): ...
def white_tophat(input, size: Incomplete | None = ..., footprint: Incomplete | None = ..., structure: Incomplete | None = ..., output: Incomplete | None = ..., mode: str = ..., cval: float = ..., origin: int = ...): ...
def black_tophat(input, size: Incomplete | None = ..., footprint: Incomplete | None = ..., structure: Incomplete | None = ..., output: Incomplete | None = ..., mode: str = ..., cval: float = ..., origin: int = ...): ...
def distance_transform_bf(input, metric: str = ..., sampling: Incomplete | None = ..., return_distances: bool = ..., return_indices: bool = ..., distances: Incomplete | None = ..., indices: Incomplete | None = ...): ...
def distance_transform_cdt(input, metric: str = ..., return_distances: bool = ..., return_indices: bool = ..., distances: Incomplete | None = ..., indices: Incomplete | None = ...): ...
def distance_transform_edt(input, sampling: Incomplete | None = ..., return_distances: bool = ..., return_indices: bool = ..., distances: Incomplete | None = ..., indices: Incomplete | None = ...): ...
