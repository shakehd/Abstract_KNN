import numpy as np
from _typeshed import Incomplete
from typing import NamedTuple, TypeVar, Union

IntNumber = Union[int, np.integer]
DecimalNumber = Union[float, np.floating, np.integer]
SeedType: Incomplete
GeneratorType = TypeVar('GeneratorType', bound=Union[np.random.Generator, np.random.RandomState])

class Generator: ...

def float_factorial(n: int) -> float: ...
def check_random_state(seed): ...

class FullArgSpec(NamedTuple):
    args: Incomplete
    varargs: Incomplete
    varkw: Incomplete
    defaults: Incomplete
    kwonlyargs: Incomplete
    kwonlydefaults: Incomplete
    annotations: Incomplete

def getfullargspec_no_self(func): ...

class _FunctionWrapper:
    f: Incomplete
    args: Incomplete
    def __init__(self, f, args) -> None: ...
    def __call__(self, x): ...

class MapWrapper:
    pool: Incomplete
    def __init__(self, pool: int = ...) -> None: ...
    def __enter__(self): ...
    def terminate(self) -> None: ...
    def join(self) -> None: ...
    def close(self) -> None: ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_value: BaseException | None, traceback: types.TracebackType | None) -> None: ...
    def __call__(self, func, iterable): ...

def rng_integers(gen, low, high: Incomplete | None = ..., size: Incomplete | None = ..., dtype: str = ..., endpoint: bool = ...): ...
