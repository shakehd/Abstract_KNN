import abc
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from scipy._lib._util import MapWrapper as MapWrapper

class VertexBase(ABC, metaclass=abc.ABCMeta):
    x: Incomplete
    hash: Incomplete
    nn: Incomplete
    index: Incomplete
    def __init__(self, x, nn: Incomplete | None = ..., index: Incomplete | None = ...) -> None: ...
    def __hash__(self): ...
    x_a: Incomplete
    def __getattr__(self, item): ...
    @abstractmethod
    def connect(self, v): ...
    @abstractmethod
    def disconnect(self, v): ...
    st: Incomplete
    def star(self): ...

class VertexScalarField(VertexBase):
    check_min: bool
    check_max: bool
    def __init__(self, x, field: Incomplete | None = ..., nn: Incomplete | None = ..., index: Incomplete | None = ..., field_args=..., g_cons: Incomplete | None = ..., g_cons_args=...) -> None: ...
    def connect(self, v) -> None: ...
    def disconnect(self, v) -> None: ...
    def minimiser(self): ...
    def maximiser(self): ...

class VertexVectorField(VertexBase, metaclass=abc.ABCMeta):
    def __init__(self, x, sfield: Incomplete | None = ..., vfield: Incomplete | None = ..., field_args=..., vfield_args=..., g_cons: Incomplete | None = ..., g_cons_args=..., nn: Incomplete | None = ..., index: Incomplete | None = ...) -> None: ...

class VertexCacheBase:
    cache: Incomplete
    nfev: int
    index: int
    def __init__(self) -> None: ...
    def __iter__(self): ...
    def size(self): ...
    def print_out(self) -> None: ...

class VertexCube(VertexBase):
    def __init__(self, x, nn: Incomplete | None = ..., index: Incomplete | None = ...) -> None: ...
    def connect(self, v) -> None: ...
    def disconnect(self, v) -> None: ...

class VertexCacheIndex(VertexCacheBase):
    Vertex: Incomplete
    def __init__(self) -> None: ...
    def __getitem__(self, x, nn: Incomplete | None = ...): ...

class VertexCacheField(VertexCacheBase):
    index: int
    Vertex: Incomplete
    field: Incomplete
    field_args: Incomplete
    wfield: Incomplete
    g_cons: Incomplete
    g_cons_args: Incomplete
    wgcons: Incomplete
    gpool: Incomplete
    fpool: Incomplete
    sfc_lock: bool
    workers: Incomplete
    process_gpool: Incomplete
    process_fpool: Incomplete
    def __init__(self, field: Incomplete | None = ..., field_args=..., g_cons: Incomplete | None = ..., g_cons_args=..., workers: int = ...) -> None: ...
    def __getitem__(self, x, nn: Incomplete | None = ...): ...
    def process_pools(self) -> None: ...
    def feasibility_check(self, v) -> None: ...
    def compute_sfield(self, v) -> None: ...
    def proc_gpool(self) -> None: ...
    def pproc_gpool(self) -> None: ...
    def proc_fpool_g(self) -> None: ...
    def proc_fpool_nog(self) -> None: ...
    def pproc_fpool_g(self) -> None: ...
    def pproc_fpool_nog(self) -> None: ...
    def proc_minimisers(self) -> None: ...

class ConstraintWrapper:
    g_cons: Incomplete
    g_cons_args: Incomplete
    def __init__(self, g_cons, g_cons_args) -> None: ...
    def gcons(self, v_x_a): ...

class FieldWrapper:
    field: Incomplete
    field_args: Incomplete
    def __init__(self, field, field_args) -> None: ...
    def func(self, v_x_a): ...
