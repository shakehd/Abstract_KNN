from .common import CL_scaling_vector as CL_scaling_vector, build_quadratic_1d as build_quadratic_1d, check_termination as check_termination, compute_grad as compute_grad, compute_jac_scale as compute_jac_scale, evaluate_quadratic as evaluate_quadratic, find_active_constraints as find_active_constraints, in_bounds as in_bounds, intersect_trust_region as intersect_trust_region, make_strictly_feasible as make_strictly_feasible, minimize_quadratic_1d as minimize_quadratic_1d, print_header_nonlinear as print_header_nonlinear, print_iteration_nonlinear as print_iteration_nonlinear, regularized_lsq_operator as regularized_lsq_operator, right_multiplied_operator as right_multiplied_operator, scale_for_robust_loss_function as scale_for_robust_loss_function, solve_lsq_trust_region as solve_lsq_trust_region, solve_trust_region_2d as solve_trust_region_2d, step_size_to_bound as step_size_to_bound, update_tr_radius as update_tr_radius
from scipy.linalg import qr as qr, svd as svd
from scipy.optimize import OptimizeResult as OptimizeResult
from scipy.sparse.linalg import lsmr as lsmr

def trf(fun, jac, x0, f0, J0, lb, ub, ftol, xtol, gtol, max_nfev, x_scale, loss_function, tr_solver, tr_options, verbose): ...
def select_step(x, J_h, diag_h, g_h, p, p_h, d, Delta, lb, ub, theta): ...
def trf_bounds(fun, jac, x0, f0, J0, lb, ub, ftol, xtol, gtol, max_nfev, x_scale, loss_function, tr_solver, tr_options, verbose): ...
def trf_no_bounds(fun, jac, x0, f0, J0, ftol, xtol, gtol, max_nfev, x_scale, loss_function, tr_solver, tr_options, verbose): ...
