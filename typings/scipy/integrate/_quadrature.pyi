from _typeshed import Incomplete
from typing import Any, NamedTuple, Protocol

def trapezoid(y, x: Incomplete | None = ..., dx: float = ..., axis: int = ...): ...
def trapz(y, x: Incomplete | None = ..., dx: float = ..., axis: int = ...): ...

class AccuracyWarning(Warning): ...

class CacheAttributes(Protocol):
    cache: dict[int, tuple[Any, Any]]

def fixed_quad(func, a, b, args=..., n: int = ...): ...
def quadrature(func, a, b, args=..., tol: float = ..., rtol: float = ..., maxiter: int = ..., vec_func: bool = ..., miniter: int = ...): ...
def cumtrapz(y, x: Incomplete | None = ..., dx: float = ..., axis: int = ..., initial: Incomplete | None = ...): ...
def cumulative_trapezoid(y, x: Incomplete | None = ..., dx: float = ..., axis: int = ..., initial: Incomplete | None = ...): ...
def simps(y, x: Incomplete | None = ..., dx: float = ..., axis: int = ..., even: Incomplete | None = ...): ...
def simpson(y, x: Incomplete | None = ..., dx: float = ..., axis: int = ..., even: Incomplete | None = ...): ...
def romb(y, dx: float = ..., axis: int = ..., show: bool = ...): ...
def romberg(function, a, b, args=..., tol: float = ..., rtol: float = ..., show: bool = ..., divmax: int = ..., vec_func: bool = ...): ...
def newton_cotes(rn, equal: int = ...): ...

class QMCQuadResult(NamedTuple):
    integral: Incomplete
    standard_error: Incomplete

def qmc_quad(func, a, b, *, n_estimates: int = ..., n_points: int = ..., qrng: Incomplete | None = ..., log: bool = ...): ...
