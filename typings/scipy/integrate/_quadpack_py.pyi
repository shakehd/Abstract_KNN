from _typeshed import Incomplete

class IntegrationWarning(UserWarning): ...

def quad(func, a, b, args=..., full_output: int = ..., epsabs: float = ..., epsrel: float = ..., limit: int = ..., points: Incomplete | None = ..., weight: Incomplete | None = ..., wvar: Incomplete | None = ..., wopts: Incomplete | None = ..., maxp1: int = ..., limlst: int = ..., complex_func: bool = ...): ...
def dblquad(func, a, b, gfun, hfun, args=..., epsabs: float = ..., epsrel: float = ...): ...
def tplquad(func, a, b, gfun, hfun, qfun, rfun, args=..., epsabs: float = ..., epsrel: float = ...): ...
def nquad(func, ranges, args: Incomplete | None = ..., opts: Incomplete | None = ..., full_output: bool = ...): ...

class _RangeFunc:
    range_: Incomplete
    def __init__(self, range_) -> None: ...
    def __call__(self, *args): ...

class _OptFunc:
    opt: Incomplete
    def __init__(self, opt) -> None: ...
    def __call__(self, *args): ...

class _NQuad:
    abserr: int
    func: Incomplete
    ranges: Incomplete
    opts: Incomplete
    maxdepth: Incomplete
    full_output: Incomplete
    out_dict: Incomplete
    def __init__(self, func, ranges, opts, full_output) -> None: ...
    def integrate(self, *args, **kwargs): ...
