import collections
from _typeshed import Incomplete
from scipy._lib._util import MapWrapper as MapWrapper

class LRUDict(collections.OrderedDict):
    def __init__(self, max_size) -> None: ...
    def __setitem__(self, key, value) -> None: ...
    def update(self, other) -> None: ...

class SemiInfiniteFunc:
    def __init__(self, func, start, infty) -> None: ...
    def get_t(self, x): ...
    def __call__(self, t): ...

class DoubleInfiniteFunc:
    def __init__(self, func) -> None: ...
    def get_t(self, x): ...
    def __call__(self, t): ...

class _Bunch:
    def __init__(self, **kwargs) -> None: ...

def quad_vec(f, a, b, epsabs: float = ..., epsrel: float = ..., norm: str = ..., cache_size: float = ..., limit: int = ..., workers: int = ..., points: Incomplete | None = ..., quadrature: Incomplete | None = ..., full_output: bool = ..., *, args=...): ...
