from _typeshed import Incomplete

class BSpline:
    k: Incomplete
    c: Incomplete
    t: Incomplete
    extrapolate: Incomplete
    axis: Incomplete
    def __init__(self, t, c, k, extrapolate: bool = ..., axis: int = ...) -> None: ...
    @classmethod
    def construct_fast(cls, t, c, k, extrapolate: bool = ..., axis: int = ...): ...
    @property
    def tck(self): ...
    @classmethod
    def basis_element(cls, t, extrapolate: bool = ...): ...
    @classmethod
    def design_matrix(cls, x, t, k, extrapolate: bool = ...): ...
    def __call__(self, x, nu: int = ..., extrapolate: Incomplete | None = ...): ...
    def derivative(self, nu: int = ...): ...
    def antiderivative(self, nu: int = ...): ...
    def integrate(self, a, b, extrapolate: Incomplete | None = ...): ...
    @classmethod
    def from_power_basis(cls, pp, bc_type: str = ...): ...

def make_interp_spline(x, y, k: int = ..., t: Incomplete | None = ..., bc_type: Incomplete | None = ..., axis: int = ..., check_finite: bool = ...): ...
def make_lsq_spline(x, y, t, k: int = ..., w: Incomplete | None = ..., axis: int = ..., check_finite: bool = ...): ...
def make_smoothing_spline(x, y, w: Incomplete | None = ..., lam: Incomplete | None = ...): ...
