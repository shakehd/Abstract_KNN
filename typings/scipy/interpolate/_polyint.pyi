from _typeshed import Incomplete

class _Interpolator1D:
    dtype: Incomplete
    def __init__(self, xi: Incomplete | None = ..., yi: Incomplete | None = ..., axis: Incomplete | None = ...) -> None: ...
    def __call__(self, x): ...

class _Interpolator1DWithDerivatives(_Interpolator1D):
    def derivatives(self, x, der: Incomplete | None = ...): ...
    def derivative(self, x, der: int = ...): ...

class KroghInterpolator(_Interpolator1DWithDerivatives):
    xi: Incomplete
    yi: Incomplete
    c: Incomplete
    def __init__(self, xi, yi, axis: int = ...) -> None: ...

def krogh_interpolate(xi, yi, x, der: int = ..., axis: int = ...): ...
def approximate_taylor_polynomial(f, x, degree, scale, order: Incomplete | None = ...): ...

class BarycentricInterpolator(_Interpolator1D):
    xi: Incomplete
    n: Incomplete
    wi: Incomplete
    def __init__(self, xi, yi: Incomplete | None = ..., axis: int = ...) -> None: ...
    yi: Incomplete
    def set_yi(self, yi, axis: Incomplete | None = ...) -> None: ...
    def add_xi(self, xi, yi: Incomplete | None = ...) -> None: ...
    def __call__(self, x): ...

def barycentric_interpolate(xi, yi, x, axis: int = ...): ...
