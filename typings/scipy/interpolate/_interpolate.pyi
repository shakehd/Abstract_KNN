from ._polyint import _Interpolator1D
from _typeshed import Incomplete

def lagrange(x, w): ...

class interp2d:
    tck: Incomplete
    bounds_error: Incomplete
    fill_value: Incomplete
    def __init__(self, x, y, z, kind: str = ..., copy: bool = ..., bounds_error: bool = ..., fill_value: Incomplete | None = ...) -> None: ...
    def __call__(self, x, y, dx: int = ..., dy: int = ..., assume_sorted: bool = ...): ...

class interp1d(_Interpolator1D):
    bounds_error: Incomplete
    copy: Incomplete
    axis: Incomplete
    y: Incomplete
    x: Incomplete
    x_bds: Incomplete
    def __init__(self, x, y, kind: str = ..., axis: int = ..., copy: bool = ..., bounds_error: Incomplete | None = ..., fill_value=..., assume_sorted: bool = ...) -> None: ...
    @property
    def fill_value(self): ...
    @fill_value.setter
    def fill_value(self, fill_value) -> None: ...

class _PPolyBase:
    c: Incomplete
    x: Incomplete
    extrapolate: Incomplete
    axis: Incomplete
    def __init__(self, c, x, extrapolate: Incomplete | None = ..., axis: int = ...) -> None: ...
    @classmethod
    def construct_fast(cls, c, x, extrapolate: Incomplete | None = ..., axis: int = ...): ...
    def extend(self, c, x) -> None: ...
    def __call__(self, x, nu: int = ..., extrapolate: Incomplete | None = ...): ...

class PPoly(_PPolyBase):
    def derivative(self, nu: int = ...): ...
    def antiderivative(self, nu: int = ...): ...
    def integrate(self, a, b, extrapolate: Incomplete | None = ...): ...
    def solve(self, y: float = ..., discontinuity: bool = ..., extrapolate: Incomplete | None = ...): ...
    def roots(self, discontinuity: bool = ..., extrapolate: Incomplete | None = ...): ...
    @classmethod
    def from_spline(cls, tck, extrapolate: Incomplete | None = ...): ...
    @classmethod
    def from_bernstein_basis(cls, bp, extrapolate: Incomplete | None = ...): ...

class BPoly(_PPolyBase):
    def derivative(self, nu: int = ...): ...
    def antiderivative(self, nu: int = ...): ...
    def integrate(self, a, b, extrapolate: Incomplete | None = ...): ...
    c: Incomplete
    def extend(self, c, x): ...
    @classmethod
    def from_power_basis(cls, pp, extrapolate: Incomplete | None = ...): ...
    @classmethod
    def from_derivatives(cls, xi, yi, orders: Incomplete | None = ..., extrapolate: Incomplete | None = ...): ...

class NdPPoly:
    x: Incomplete
    c: Incomplete
    extrapolate: Incomplete
    def __init__(self, c, x, extrapolate: Incomplete | None = ...) -> None: ...
    @classmethod
    def construct_fast(cls, c, x, extrapolate: Incomplete | None = ...): ...
    def __call__(self, x, nu: Incomplete | None = ..., extrapolate: Incomplete | None = ...): ...
    def derivative(self, nu): ...
    def antiderivative(self, nu): ...
    def integrate_1d(self, a, b, axis, extrapolate: Incomplete | None = ...): ...
    def integrate(self, ranges, extrapolate: Incomplete | None = ...): ...
