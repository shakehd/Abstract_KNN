from . import PPoly
from _typeshed import Incomplete

class CubicHermiteSpline(PPoly):
    axis: Incomplete
    def __init__(self, x, y, dydx, axis: int = ..., extrapolate: Incomplete | None = ...) -> None: ...

class PchipInterpolator(CubicHermiteSpline):
    axis: Incomplete
    def __init__(self, x, y, axis: int = ..., extrapolate: Incomplete | None = ...) -> None: ...

def pchip_interpolate(xi, yi, x, der: int = ..., axis: int = ...): ...

class Akima1DInterpolator(CubicHermiteSpline):
    axis: Incomplete
    def __init__(self, x, y, axis: int = ...) -> None: ...
    def extend(self, c, x, right: bool = ...) -> None: ...
    @classmethod
    def from_spline(cls, tck, extrapolate: Incomplete | None = ...) -> None: ...
    @classmethod
    def from_bernstein_basis(cls, bp, extrapolate: Incomplete | None = ...) -> None: ...

class CubicSpline(CubicHermiteSpline):
    axis: Incomplete
    def __init__(self, x, y, axis: int = ..., bc_type: str = ..., extrapolate: Incomplete | None = ...) -> None: ...
