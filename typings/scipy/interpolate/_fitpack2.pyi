from _typeshed import Incomplete

class UnivariateSpline:
    def __init__(self, x, y, w: Incomplete | None = ..., bbox=..., k: int = ..., s: Incomplete | None = ..., ext: int = ..., check_finite: bool = ...) -> None: ...
    @staticmethod
    def validate_input(x, y, w, bbox, k, s, ext, check_finite): ...
    def set_smoothing_factor(self, s) -> None: ...
    def __call__(self, x, nu: int = ..., ext: Incomplete | None = ...): ...
    def get_knots(self): ...
    def get_coeffs(self): ...
    def get_residual(self): ...
    def integral(self, a, b): ...
    def derivatives(self, x): ...
    def roots(self): ...
    def derivative(self, n: int = ...): ...
    def antiderivative(self, n: int = ...): ...

class InterpolatedUnivariateSpline(UnivariateSpline):
    def __init__(self, x, y, w: Incomplete | None = ..., bbox=..., k: int = ..., ext: int = ..., check_finite: bool = ...) -> None: ...

class LSQUnivariateSpline(UnivariateSpline):
    def __init__(self, x, y, t, w: Incomplete | None = ..., bbox=..., k: int = ..., ext: int = ..., check_finite: bool = ...) -> None: ...

class _BivariateSplineBase:
    def get_residual(self): ...
    def get_knots(self): ...
    def get_coeffs(self): ...
    def __call__(self, x, y, dx: int = ..., dy: int = ..., grid: bool = ...): ...
    def partial_derivative(self, dx, dy): ...

class BivariateSpline(_BivariateSplineBase):
    def ev(self, xi, yi, dx: int = ..., dy: int = ...): ...
    def integral(self, xa, xb, ya, yb): ...

class _DerivedBivariateSpline(_BivariateSplineBase):
    @property
    def fp(self) -> None: ...
    def get_residual(self) -> None: ...

class SmoothBivariateSpline(BivariateSpline):
    fp: Incomplete
    tck: Incomplete
    degrees: Incomplete
    def __init__(self, x, y, z, w: Incomplete | None = ..., bbox=..., kx: int = ..., ky: int = ..., s: Incomplete | None = ..., eps: float = ...) -> None: ...

class LSQBivariateSpline(BivariateSpline):
    fp: Incomplete
    tck: Incomplete
    degrees: Incomplete
    def __init__(self, x, y, z, tx, ty, w: Incomplete | None = ..., bbox=..., kx: int = ..., ky: int = ..., eps: Incomplete | None = ...) -> None: ...

class RectBivariateSpline(BivariateSpline):
    fp: Incomplete
    tck: Incomplete
    degrees: Incomplete
    def __init__(self, x, y, z, bbox=..., kx: int = ..., ky: int = ..., s: int = ...) -> None: ...

class SphereBivariateSpline(_BivariateSplineBase):
    def __call__(self, theta, phi, dtheta: int = ..., dphi: int = ..., grid: bool = ...): ...
    def ev(self, theta, phi, dtheta: int = ..., dphi: int = ...): ...

class SmoothSphereBivariateSpline(SphereBivariateSpline):
    fp: Incomplete
    tck: Incomplete
    degrees: Incomplete
    def __init__(self, theta, phi, r, w: Incomplete | None = ..., s: float = ..., eps: float = ...) -> None: ...
    def __call__(self, theta, phi, dtheta: int = ..., dphi: int = ..., grid: bool = ...): ...

class LSQSphereBivariateSpline(SphereBivariateSpline):
    fp: Incomplete
    tck: Incomplete
    degrees: Incomplete
    def __init__(self, theta, phi, r, tt, tp, w: Incomplete | None = ..., eps: float = ...) -> None: ...
    def __call__(self, theta, phi, dtheta: int = ..., dphi: int = ..., grid: bool = ...): ...

class RectSphereBivariateSpline(SphereBivariateSpline):
    fp: Incomplete
    tck: Incomplete
    degrees: Incomplete
    v0: Incomplete
    def __init__(self, u, v, r, s: float = ..., pole_continuity: bool = ..., pole_values: Incomplete | None = ..., pole_exact: bool = ..., pole_flat: bool = ...) -> None: ...
    def __call__(self, theta, phi, dtheta: int = ..., dphi: int = ..., grid: bool = ...): ...
