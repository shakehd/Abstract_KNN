from _typeshed import Incomplete
from typing import NamedTuple

def argstoarray(*args): ...
def find_repeats(arr): ...
def count_tied_groups(x, use_missing: bool = ...): ...
def rankdata(data, axis: Incomplete | None = ..., use_missing: bool = ...): ...

class ModeResult(NamedTuple):
    mode: Incomplete
    count: Incomplete

def mode(a, axis: int = ...): ...
def msign(x): ...
def pearsonr(x, y): ...
def spearmanr(x, y: Incomplete | None = ..., use_ties: bool = ..., axis: Incomplete | None = ..., nan_policy: str = ..., alternative: str = ...): ...
def kendalltau(x, y, use_ties: bool = ..., use_missing: bool = ..., method: str = ..., alternative: str = ...): ...
def kendalltau_seasonal(x): ...

class PointbiserialrResult(NamedTuple):
    correlation: Incomplete
    pvalue: Incomplete

def pointbiserialr(x, y): ...
def linregress(x, y: Incomplete | None = ...): ...
def theilslopes(y, x: Incomplete | None = ..., alpha: float = ..., method: str = ...): ...
def siegelslopes(y, x: Incomplete | None = ..., method: str = ...): ...
def sen_seasonal_slopes(x): ...

class Ttest_1sampResult(NamedTuple):
    statistic: Incomplete
    pvalue: Incomplete

def ttest_1samp(a, popmean, axis: int = ..., alternative: str = ...): ...
ttest_onesamp = ttest_1samp

class Ttest_indResult(NamedTuple):
    statistic: Incomplete
    pvalue: Incomplete

def ttest_ind(a, b, axis: int = ..., equal_var: bool = ..., alternative: str = ...): ...

class Ttest_relResult(NamedTuple):
    statistic: Incomplete
    pvalue: Incomplete

def ttest_rel(a, b, axis: int = ..., alternative: str = ...): ...

class MannwhitneyuResult(NamedTuple):
    statistic: Incomplete
    pvalue: Incomplete

def mannwhitneyu(x, y, use_continuity: bool = ...): ...

class KruskalResult(NamedTuple):
    statistic: Incomplete
    pvalue: Incomplete

def kruskal(*args): ...
kruskalwallis = kruskal

def ks_1samp(x, cdf, args=..., alternative: str = ..., method: str = ...): ...
def ks_2samp(data1, data2, alternative: str = ..., method: str = ...): ...
ks_twosamp = ks_2samp

def kstest(data1, data2, args=..., alternative: str = ..., method: str = ...): ...
def trima(a, limits: Incomplete | None = ..., inclusive=...): ...
def trimr(a, limits: Incomplete | None = ..., inclusive=..., axis: Incomplete | None = ...): ...
def trim(a, limits: Incomplete | None = ..., inclusive=..., relative: bool = ..., axis: Incomplete | None = ...): ...
def trimboth(data, proportiontocut: float = ..., inclusive=..., axis: Incomplete | None = ...): ...
def trimtail(data, proportiontocut: float = ..., tail: str = ..., inclusive=..., axis: Incomplete | None = ...): ...
trim1 = trimtail

def trimmed_mean(a, limits=..., inclusive=..., relative: bool = ..., axis: Incomplete | None = ...): ...
def trimmed_var(a, limits=..., inclusive=..., relative: bool = ..., axis: Incomplete | None = ..., ddof: int = ...): ...
def trimmed_std(a, limits=..., inclusive=..., relative: bool = ..., axis: Incomplete | None = ..., ddof: int = ...): ...
def trimmed_stde(a, limits=..., inclusive=..., axis: Incomplete | None = ...): ...
def tmean(a, limits: Incomplete | None = ..., inclusive=..., axis: Incomplete | None = ...): ...
def tvar(a, limits: Incomplete | None = ..., inclusive=..., axis: int = ..., ddof: int = ...): ...
def tmin(a, lowerlimit: Incomplete | None = ..., axis: int = ..., inclusive: bool = ...): ...
def tmax(a, upperlimit: Incomplete | None = ..., axis: int = ..., inclusive: bool = ...): ...
def tsem(a, limits: Incomplete | None = ..., inclusive=..., axis: int = ..., ddof: int = ...): ...
def winsorize(a, limits: Incomplete | None = ..., inclusive=..., inplace: bool = ..., axis: Incomplete | None = ..., nan_policy: str = ...): ...
def moment(a, moment: int = ..., axis: int = ...): ...
def variation(a, axis: int = ..., ddof: int = ...): ...
def skew(a, axis: int = ..., bias: bool = ...): ...
def kurtosis(a, axis: int = ..., fisher: bool = ..., bias: bool = ...): ...

class DescribeResult(NamedTuple):
    nobs: Incomplete
    minmax: Incomplete
    mean: Incomplete
    variance: Incomplete
    skewness: Incomplete
    kurtosis: Incomplete

def describe(a, axis: int = ..., ddof: int = ..., bias: bool = ...): ...

class SkewtestResult(NamedTuple):
    statistic: Incomplete
    pvalue: Incomplete

def skewtest(a, axis: int = ..., alternative: str = ...): ...

class KurtosistestResult(NamedTuple):
    statistic: Incomplete
    pvalue: Incomplete

def kurtosistest(a, axis: int = ..., alternative: str = ...): ...

class NormaltestResult(NamedTuple):
    statistic: Incomplete
    pvalue: Incomplete

def normaltest(a, axis: int = ...): ...
def mquantiles(a, prob=..., alphap: float = ..., betap: float = ..., axis: Incomplete | None = ..., limit=...): ...
def scoreatpercentile(data, per, limit=..., alphap: float = ..., betap: float = ...): ...
def plotting_positions(data, alpha: float = ..., beta: float = ...): ...
meppf = plotting_positions

def obrientransform(*args): ...
def sem(a, axis: int = ..., ddof: int = ...): ...

class F_onewayResult(NamedTuple):
    statistic: Incomplete
    pvalue: Incomplete

def f_oneway(*args): ...

class FriedmanchisquareResult(NamedTuple):
    statistic: Incomplete
    pvalue: Incomplete

def friedmanchisquare(*args): ...

class BrunnerMunzelResult(NamedTuple):
    statistic: Incomplete
    pvalue: Incomplete

def brunnermunzel(x, y, alternative: str = ..., distribution: str = ...): ...
