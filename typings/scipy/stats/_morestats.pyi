from _typeshed import Incomplete
from typing import NamedTuple

class Mean(NamedTuple):
    statistic: Incomplete
    minmax: Incomplete

class Variance(NamedTuple):
    statistic: Incomplete
    minmax: Incomplete

class Std_dev(NamedTuple):
    statistic: Incomplete
    minmax: Incomplete

def bayes_mvs(data, alpha: float = ...): ...
def mvsdist(data): ...
def kstat(data, n: int = ...): ...
def kstatvar(data, n: int = ...): ...
def probplot(x, sparams=..., dist: str = ..., fit: bool = ..., plot: Incomplete | None = ..., rvalue: bool = ...): ...
def ppcc_max(x, brack=..., dist: str = ...): ...
def ppcc_plot(x, a, b, dist: str = ..., plot: Incomplete | None = ..., N: int = ...): ...
def boxcox_llf(lmb, data): ...
def boxcox(x, lmbda: Incomplete | None = ..., alpha: Incomplete | None = ..., optimizer: Incomplete | None = ...): ...
def boxcox_normmax(x, brack: Incomplete | None = ..., method: str = ..., optimizer: Incomplete | None = ...): ...
def boxcox_normplot(x, la, lb, plot: Incomplete | None = ..., N: int = ...): ...
def yeojohnson(x, lmbda: Incomplete | None = ...): ...
def yeojohnson_llf(lmb, data): ...
def yeojohnson_normmax(x, brack=...): ...
def yeojohnson_normplot(x, la, lb, plot: Incomplete | None = ..., N: int = ...): ...

class ShapiroResult(NamedTuple):
    statistic: Incomplete
    pvalue: Incomplete

def shapiro(x): ...
def anderson(x, dist: str = ...): ...
def anderson_ksamp(samples, midrank: bool = ...): ...

class AnsariResult(NamedTuple):
    statistic: Incomplete
    pvalue: Incomplete

class _ABW:
    m: Incomplete
    n: Incomplete
    astart: Incomplete
    total: Incomplete
    freqs: Incomplete
    def __init__(self) -> None: ...
    def pmf(self, k, n, m): ...
    def cdf(self, k, n, m): ...
    def sf(self, k, n, m): ...

def ansari(x, y, alternative: str = ...): ...

class BartlettResult(NamedTuple):
    statistic: Incomplete
    pvalue: Incomplete

def bartlett(*samples): ...

class LeveneResult(NamedTuple):
    statistic: Incomplete
    pvalue: Incomplete

def levene(*samples, center: str = ..., proportiontocut: float = ...): ...
def binom_test(x, n: Incomplete | None = ..., p: float = ..., alternative: str = ...): ...

class FlignerResult(NamedTuple):
    statistic: Incomplete
    pvalue: Incomplete

def fligner(*samples, center: str = ..., proportiontocut: float = ...): ...
def mood(x, y, axis: int = ..., alternative: str = ...): ...
def wilcoxon(x, y: Incomplete | None = ..., zero_method: str = ..., correction: bool = ..., alternative: str = ..., method: str = ...): ...
def median_test(*samples, ties: str = ..., correction: bool = ..., lambda_: int = ..., nan_policy: str = ...): ...
def circmean(samples, high=..., low: int = ..., axis: Incomplete | None = ..., nan_policy: str = ...): ...
def circvar(samples, high=..., low: int = ..., axis: Incomplete | None = ..., nan_policy: str = ...): ...
def circstd(samples, high=..., low: int = ..., axis: Incomplete | None = ..., nan_policy: str = ..., *, normalize: bool = ...): ...

class DirectionalStats:
    mean_direction: Incomplete
    mean_resultant_length: Incomplete
    def __init__(self, mean_direction, mean_resultant_length) -> None: ...

def directional_stats(samples, *, axis: int = ..., normalize: bool = ...): ...
def false_discovery_control(ps, *, axis: int = ..., method: str = ...): ...
