import numpy as np
from ._common import ConfidenceInterval
from _typeshed import Incomplete
from dataclasses import dataclass

@dataclass
class BootstrapResult:
    confidence_interval: ConfidenceInterval
    bootstrap_distribution: np.ndarray
    standard_error: float | np.ndarray
    def __init__(self, confidence_interval, bootstrap_distribution, standard_error) -> None: ...

def bootstrap(data, statistic, *, n_resamples: int = ..., batch: Incomplete | None = ..., vectorized: Incomplete | None = ..., paired: bool = ..., axis: int = ..., confidence_level: float = ..., alternative: str = ..., method: str = ..., bootstrap_result: Incomplete | None = ..., random_state: Incomplete | None = ...): ...

@dataclass
class MonteCarloTestResult:
    statistic: float | np.ndarray
    pvalue: float | np.ndarray
    null_distribution: np.ndarray
    def __init__(self, statistic, pvalue, null_distribution) -> None: ...

def monte_carlo_test(data, rvs, statistic, *, vectorized: Incomplete | None = ..., n_resamples: int = ..., batch: Incomplete | None = ..., alternative: str = ..., axis: int = ...): ...

@dataclass
class PermutationTestResult:
    statistic: float | np.ndarray
    pvalue: float | np.ndarray
    null_distribution: np.ndarray
    def __init__(self, statistic, pvalue, null_distribution) -> None: ...

def permutation_test(data, statistic, *, permutation_type: str = ..., vectorized: Incomplete | None = ..., n_resamples: int = ..., batch: Incomplete | None = ..., alternative: str = ..., axis: int = ..., random_state: Incomplete | None = ...): ...

@dataclass
class ResamplingMethod:
    n_resamples: int = ...
    batch: int = ...
    def __init__(self, n_resamples, batch) -> None: ...

@dataclass
class MonteCarloMethod(ResamplingMethod):
    rvs: object = ...
    def __init__(self, n_resamples, batch, rvs) -> None: ...

@dataclass
class PermutationMethod(ResamplingMethod):
    random_state: object = ...
    def __init__(self, n_resamples, batch, random_state) -> None: ...

@dataclass
class BootstrapMethod(ResamplingMethod):
    random_state: object = ...
    method: str = ...
    def __init__(self, n_resamples, batch, random_state, method) -> None: ...
