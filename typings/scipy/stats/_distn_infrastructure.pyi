from ._censored_data import CensoredData as CensoredData
from ._distr_params import distcont as distcont, distdiscrete as distdiscrete
from _typeshed import Incomplete
from scipy import integrate as integrate, optimize as optimize, stats as stats
from scipy._lib import doccer as doccer
from scipy._lib._util import check_random_state as check_random_state
from scipy.special import comb as comb, entr as entr
from scipy.stats._warnings_errors import FitError as FitError

docheaders: Incomplete
docdict: Incomplete
docdict_discrete: Incomplete

class rv_frozen:
    args: Incomplete
    kwds: Incomplete
    dist: Incomplete
    def __init__(self, dist, *args, **kwds) -> None: ...
    @property
    def random_state(self): ...
    @random_state.setter
    def random_state(self, seed) -> None: ...
    def cdf(self, x): ...
    def logcdf(self, x): ...
    def ppf(self, q): ...
    def isf(self, q): ...
    def rvs(self, size: Incomplete | None = ..., random_state: Incomplete | None = ...): ...
    def sf(self, x): ...
    def logsf(self, x): ...
    def stats(self, moments: str = ...): ...
    def median(self): ...
    def mean(self): ...
    def var(self): ...
    def std(self): ...
    def moment(self, order: Incomplete | None = ...): ...
    def entropy(self): ...
    def interval(self, confidence: Incomplete | None = ...): ...
    def expect(self, func: Incomplete | None = ..., lb: Incomplete | None = ..., ub: Incomplete | None = ..., conditional: bool = ..., **kwds): ...
    def support(self): ...

class rv_discrete_frozen(rv_frozen):
    def pmf(self, k): ...
    def logpmf(self, k): ...

class rv_continuous_frozen(rv_frozen):
    def pdf(self, x): ...
    def logpdf(self, x): ...

def argsreduce(cond, *args): ...

parse_arg_template: str

class rv_generic:
    def __init__(self, seed: Incomplete | None = ...) -> None: ...
    @property
    def random_state(self): ...
    @random_state.setter
    def random_state(self, seed) -> None: ...
    def freeze(self, *args, **kwds): ...
    def __call__(self, *args, **kwds): ...
    def rvs(self, *args, **kwds): ...
    def stats(self, *args, **kwds): ...
    def entropy(self, *args, **kwds): ...
    def moment(self, order, *args, **kwds): ...
    def median(self, *args, **kwds): ...
    def mean(self, *args, **kwds): ...
    def var(self, *args, **kwds): ...
    def std(self, *args, **kwds): ...
    def interval(self, confidence, *args, **kwds): ...
    def support(self, *args, **kwargs): ...
    def nnlf(self, theta, x): ...

class _ShapeInfo:
    name: Incomplete
    integrality: Incomplete
    domain: Incomplete
    def __init__(self, name, integrality: bool = ..., domain=..., inclusive=...) -> None: ...

class rv_continuous(rv_generic):
    badvalue: Incomplete
    name: Incomplete
    a: Incomplete
    b: Incomplete
    xtol: Incomplete
    moment_type: Incomplete
    shapes: Incomplete
    def __init__(self, momtype: int = ..., a: Incomplete | None = ..., b: Incomplete | None = ..., xtol: float = ..., badvalue: Incomplete | None = ..., name: Incomplete | None = ..., longname: Incomplete | None = ..., shapes: Incomplete | None = ..., seed: Incomplete | None = ...) -> None: ...
    def pdf(self, x, *args, **kwds): ...
    def logpdf(self, x, *args, **kwds): ...
    def cdf(self, x, *args, **kwds): ...
    def logcdf(self, x, *args, **kwds): ...
    def sf(self, x, *args, **kwds): ...
    def logsf(self, x, *args, **kwds): ...
    def ppf(self, q, *args, **kwds): ...
    def isf(self, q, *args, **kwds): ...
    def fit(self, data, *args, **kwds): ...
    def fit_loc_scale(self, data, *args): ...
    def expect(self, func: Incomplete | None = ..., args=..., loc: int = ..., scale: int = ..., lb: Incomplete | None = ..., ub: Incomplete | None = ..., conditional: bool = ..., **kwds): ...

class rv_discrete(rv_generic):
    def __new__(cls, a: int = ..., b=..., name: Incomplete | None = ..., badvalue: Incomplete | None = ..., moment_tol: float = ..., values: Incomplete | None = ..., inc: int = ..., longname: Incomplete | None = ..., shapes: Incomplete | None = ..., seed: Incomplete | None = ...): ...
    badvalue: Incomplete
    a: Incomplete
    b: Incomplete
    moment_tol: Incomplete
    inc: Incomplete
    shapes: Incomplete
    def __init__(self, a: int = ..., b=..., name: Incomplete | None = ..., badvalue: Incomplete | None = ..., moment_tol: float = ..., values: Incomplete | None = ..., inc: int = ..., longname: Incomplete | None = ..., shapes: Incomplete | None = ..., seed: Incomplete | None = ...) -> None: ...
    def rvs(self, *args, **kwargs): ...
    def pmf(self, k, *args, **kwds): ...
    def logpmf(self, k, *args, **kwds): ...
    def cdf(self, k, *args, **kwds): ...
    def logcdf(self, k, *args, **kwds): ...
    def sf(self, k, *args, **kwds): ...
    def logsf(self, k, *args, **kwds): ...
    def ppf(self, q, *args, **kwds): ...
    def isf(self, q, *args, **kwds): ...
    def expect(self, func: Incomplete | None = ..., args=..., loc: int = ..., lb: Incomplete | None = ..., ub: Incomplete | None = ..., conditional: bool = ..., maxcount: int = ..., tolerance: float = ..., chunksize: int = ...): ...

class rv_sample(rv_discrete):
    badvalue: Incomplete
    moment_tol: Incomplete
    inc: Incomplete
    shapes: Incomplete
    vecentropy: Incomplete
    xk: Incomplete
    pk: Incomplete
    a: Incomplete
    b: Incomplete
    qvals: Incomplete
    def __init__(self, a: int = ..., b=..., name: Incomplete | None = ..., badvalue: Incomplete | None = ..., moment_tol: float = ..., values: Incomplete | None = ..., inc: int = ..., longname: Incomplete | None = ..., shapes: Incomplete | None = ..., seed: Incomplete | None = ...) -> None: ...
    def generic_moment(self, n): ...

def get_distribution_names(namespace_pairs, rv_base_class): ...
