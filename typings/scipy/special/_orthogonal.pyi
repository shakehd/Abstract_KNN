import numpy as np
from _typeshed import Incomplete

class orthopoly1d(np.poly1d):
    weights: Incomplete
    weight_func: Incomplete
    limits: Incomplete
    normcoef: Incomplete
    def __init__(self, roots, weights: Incomplete | None = ..., hn: float = ..., kn: float = ..., wfunc: Incomplete | None = ..., limits: Incomplete | None = ..., monic: bool = ..., eval_func: Incomplete | None = ...) -> None: ...
    def __call__(self, v): ...

def roots_jacobi(n, alpha, beta, mu: bool = ...): ...
def jacobi(n, alpha, beta, monic: bool = ...): ...
def roots_sh_jacobi(n, p1, q1, mu: bool = ...): ...
def sh_jacobi(n, p, q, monic: bool = ...): ...
def roots_genlaguerre(n, alpha, mu: bool = ...): ...
def genlaguerre(n, alpha, monic: bool = ...): ...
def roots_laguerre(n, mu: bool = ...): ...
def laguerre(n, monic: bool = ...): ...
def roots_hermite(n, mu: bool = ...): ...
def hermite(n, monic: bool = ...): ...
def roots_hermitenorm(n, mu: bool = ...): ...
def hermitenorm(n, monic: bool = ...): ...
def roots_gegenbauer(n, alpha, mu: bool = ...): ...
def gegenbauer(n, alpha, monic: bool = ...): ...
def roots_chebyt(n, mu: bool = ...): ...
def chebyt(n, monic: bool = ...): ...
def roots_chebyu(n, mu: bool = ...): ...
def chebyu(n, monic: bool = ...): ...
def roots_chebyc(n, mu: bool = ...): ...
def chebyc(n, monic: bool = ...): ...
def roots_chebys(n, mu: bool = ...): ...
def chebys(n, monic: bool = ...): ...
def roots_sh_chebyt(n, mu: bool = ...): ...
def sh_chebyt(n, monic: bool = ...): ...
def roots_sh_chebyu(n, mu: bool = ...): ...
def sh_chebyu(n, monic: bool = ...): ...
def roots_legendre(n, mu: bool = ...): ...
def legendre(n, monic: bool = ...): ...
def roots_sh_legendre(n, mu: bool = ...): ...
def sh_legendre(n, monic: bool = ...): ...

# Names in __all__ with no definition:
#   c_roots
#   cg_roots
#   h_roots
#   he_roots
#   j_roots
#   js_roots
#   l_roots
#   la_roots
#   p_roots
#   ps_roots
#   s_roots
#   t_roots
#   ts_roots
#   u_roots
#   us_roots
